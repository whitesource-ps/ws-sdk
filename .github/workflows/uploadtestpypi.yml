name: Upload to TestPyPi
on:
  push:
    branches:
      - 'urgentfixes'
    tags:
      - '*'
jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9']
    steps:
      - name: Set Environment Variables
        run: |
          TOOL_NAME=$(echo '${{ github.repository }}' |awk -F '/' '{gsub(/-/, "_", $0) ;print $NF}')
          echo "TOOL_NAME=$TOOL_NAME" >> $GITHUB_ENV
          echo "RELEASE=false" >> $GITHUB_ENV
          echo "VERSION=0.0.0.ci0" >> $GITHUB_ENV
          echo "TOOL_DIR=$TOOL_NAME" >> $GITHUB_ENV
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "VERSION=$(echo ${{github.ref}} |  sed -r 's/^[\/a-zA-z-]+//')" >> $GITHUB_ENV
            if [[ $VERSION != *@(a|b)* ]]; then
              echo "RELEASE=true" >> $GITHUB_ENV
            fi
          fi
      - uses: actions/checkout@v2
      - name: Set package version
        run: |
          sed -E -i  "s/^__version__ = \"[a-z0-9\.]+\"/__version__ = \"$VERSION\"/g"  ${{ env.TOOL_DIR }}/_version.py
          echo ${$VERSION}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine flake8 mock spdx-tools
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --ignore=E501,F841
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Unittesting
        env:
          WS_USER_KEY: ${{ secrets.WS_USER_KEY }}
          WS_ORG_TOKEN: ${{ secrets.WS_ORG_TOKEN }}
        run: python -m unittest
      - name: Create Wheel Package
        run: python setup.py bdist_wheel
      - name: Install Wheel package
        run: ls -1 dist/*.whl | xargs pip install
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          artifacts: dist/${{ env.TOOL_DIR }}-${{ env.VERSION }}-py3-none-any.whl
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: env.RELEASE != 'true'
      - name: Publish to Test PyPI
        if: startsWith(github.ref, 'refs/tags/fix-v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip_existing: true
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip_existing: true
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}