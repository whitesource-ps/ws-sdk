name: WS Python SDK Build and Publish
on:
  push:
    branches:
      - '**'
    tags:
      - '*'
  schedule:
    - cron: '0 4 * * 6'
jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    env:
      TOOL_NAME: sdk
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
    steps:
      - name: Set Environment Variables
        run: |
          echo "TOOL_DIR=ws_$TOOL_NAME" >> $GITHUB_ENV
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "VERSION=$(echo ${{github.ref}} |  sed -r 's/^[\/a-zA-z-]+//')" >> $GITHUB_ENV
            if [[ $VERSION == *@(a|b)* ]]; then
              RELEASE=false >> $GITHUB_ENV
            else:
              RELEASE=true >> $GITHUB_ENV
            fi
          else
            echo "VERSION=0.0.0_ci0" >> $GITHUB_ENV
          fi
          echo "RELEASE{}?:" env.RELEASE
          echo "PRERELEASE{}?:" ${{ !env.RELEASE }}
      - uses: actions/checkout@v2
      - uses: UnicornGlobal/trufflehog-actions-scan@master
        with:
          branch: ${{ github.head_ref }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 mock wheel spdx-tools
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --ignore=E501,F841
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Unittesting
        env:
          WS_USER_KEY: ${{ secrets.WS_USER_KEY }}
          WS_ORG_TOKEN: ${{ secrets.WS_ORG_TOKEN }}
        run: python -m unittest
      - name: Create Wheel Package
        run: python setup.py bdist_wheel
      - name: Install WS SDK Wheel package
        run: pip install dist/${{ env.TOOL_DIR }}-${{ env.VERSION }}-py3-none-any.whl
      - uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          artifacts: dist/${{ env.TOOL_DIR }}-${{ env.VERSION }}-py3-none-any.whl
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: ${{ !env.RELEASE }}
      - name: Publish to Test PyPI
        if: startsWith(github.ref, 'refs/tags/test-v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip_existing: true
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip_existing: true
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
      - name: Publish to Confluence - Internal
        if: ${{ env.RELEASE }}
        uses: cupcakearmy/confluence-markdown-sync@v1
        with:
          from: README.md
          to: 1871085650
          cloud: whitesource
          user: ${{ secrets.CONFLUENCE_USER }}
          token: ${{ secrets.CONFLUENCE_TOKEN }}
      - name: Publish to Confluence - Public
        if: ${{ env.RELEASE }}
        uses: cupcakearmy/confluence-markdown-sync@v1
        with:
          from: README.md
          to: 2319384602
          cloud: whitesource
          user: ${{ secrets.CONFLUENCE_USER }}
          token: ${{ secrets.CONFLUENCE_TOKEN }}
